#!/bin/bash -e

source $OPENSHIFT_CARTRIDGE_SDK_BASH

version=${OPENSHIFT_HAZELCAST_VERSION}

logf="$OPENSHIFT_HAZELCAST_LOG_DIR/console.log"

HAZELCAST_HOME=${OPENSHIFT_HAZELCAST_DIR}/usr/hazelcast-$version
HAZELCAST_PID_FILE=${OPENSHIFT_HOMEDIR}/app-root/runtime/hazelcast.pid

# Check if the hazelcast process is running
function isrunning() {
  # Check for running app
  if [ -f "$HAZELCAST_PID_FILE" ]; then
    hazelcastpid=$(cat $HAZELCAST_PID_FILE);
    if /bin/ps --pid $hazelcastpid 1>&2 >/dev/null;
    then
      return 0
    fi
  fi
 
  return 1
}

# Kill the process given by $1 and its children
killtree() {
    local _pid=$1
    for _child in $(ps -o pid --no-headers --ppid ${_pid}); do
        killtree ${_child}
    done

    local should_be_gone_pid=$(ps -o pid -p ${_pid} --no-headers)
    if [ -z $should_be_gone_pid ]; then
        return
    else
        kill -TERM ${_pid}
    fi

    local count=0
    while [ ${count} -lt 15 ]
    do
        local should_be_gone_pid=$(ps -o pid -p ${_pid} --no-headers)
        if [ -z $should_be_gone_pid ]; then
                return
        else
                sleep 2
                let count=${count}+1
        fi
    done

    local should_be_gone_pid=$(ps -o pid -p ${_pid} --no-headers)
    if [ ! -z $should_be_gone_pid ]
    then
        kill -9 ${_pid}
    fi
}

function stop() {
  echo "Stopping Hazelcast $version cartridge"
  
  if isrunning; then
    if [ -f "$HAZELCAST_PID_FILE" ]; then
      pid=$(cat $HAZELCAST_PID_FILE);
      echo "Sending SIGTERM to hazelcast:$pid ..." 1>&2
      killtree $pid
    else 
      echo "Failed to locate Hazelcast PID File" 1>&2
    fi
  fi
}

function setup_hazelcast {
  # TODO: Figure out a better way to do this
  if [ -f "$OPENSHIFT_HAZELCAST_DIR/versions/shared/conf/cluster.xml" ]; then
    cp $OPENSHIFT_HAZELCAST_DIR/versions/shared/conf/cluster.xml $OPENSHIFT_HAZELCAST_DIR/conf/
  fi

# No need for this cluster file at the moment
#  if [ -f "$OPENSHIFT_HAZELCAST_DIR/versions/$version/conf/cluster.xml" ]; then
#    cp $OPENSHIFT_HAZELCAST_DIR/versions/$version/conf/cluster.xml $OPENSHIFT_HAZELCAST_DIR/conf/
#  fi
  
  if [ -z "$OPENSHIFT_HAZELCAST_CLUSTER" ]; then
    OPENSHIFT_HAZELCAST_CLUSTER="${OPENSHIFT_HAZELCAST_IP}:${OPENSHIFT_HAZELCAST_PORT}"
  fi
  
  OPENSHIFT_HAZELCAST_PROXY_IP=$(ping -c 1 ${OPENSHIFT_GEAR_DNS} | awk '{ print $3 ; exit }' | sed 's/(//g' | sed 's/)//g')
  
  pushd $OPENSHIFT_HAZELCAST_DIR > /dev/null
      sed -i  -e "s/\${env.OPENSHIFT_HAZELCAST_PROXY_PORT}/${OPENSHIFT_HAZELCAST_PROXY_PORT}/g" \
              -e "s/\${env.OPENSHIFT_HAZELCAST_PORT}/${OPENSHIFT_HAZELCAST_PORT}/g" \
              -e "s/\${env.OPENSHIFT_HAZELCAST_PROXY_IP}/${OPENSHIFT_HAZELCAST_PROXY_IP}/g" \
              -e "s/\${env.OPENSHIFT_HAZELCAST_IP}/${OPENSHIFT_HAZELCAST_IP}/g" \
              -e "s/\${env.OPENSHIFT_HAZELCAST_CLUSTER}/${OPENSHIFT_HAZELCAST_CLUSTER}/g" \
              ./conf/cluster.xml  
      cp ./conf/cluster.xml ./hazelcast.xml
  popd > /dev/null
}

function start() {
  if isrunning; then
      echo "Hazelcast is already running"
      return 0
  fi

#  if [ ! -d "$OPENSHIFT_HAZELCAST_DIR/usr/hazelcast-$version" ]; then
#    echo "Updating Hazelcast $version cartridge"
#    wget http://dl.bintray.com/hazelcast/downloads/hazelcast-$version.tar.gz -O $OPENSHIFT_TMP_DIR/hazelcast-$version.tar.gz
#    rm -rf $OPENSHIFT_HAZELCAST_DIR/usr/hazelcast-*
#
#    tar xzf $OPENSHIFT_TMP_DIR/hazelcast-$version.tar.gz -C $OPENSHIFT_HAZELCAST_DIR/usr/
#    rm -f $OPENSHIFT_TMP_DIR/hazelcast-$version.tar.gz
#
#    echo "Leaving the existing configuration in hazelcast/conf directory."
#    echo "You might want to copy over the new configuration files"
#    echo "from hazelcast/hazelcast-$version/conf directory."
#    echo
#  fi

  echo "Starting Hazelcast $version cartridge"

  # Setup max heap and permgen
  if [ -z "$JVM_HEAP_RATIO" ]; then
    JVM_HEAP_RATIO=0.5
  fi
  if [ -z "$JVM_PERMGEN_RATIO" ]; then
    JVM_PERMGEN_RATIO=0.2
  fi
  max_memory_mb=${OPENSHIFT_GEAR_MEMORY_MB}
  max_heap=$( echo "$max_memory_mb * $JVM_HEAP_RATIO" | bc | awk '{print int($1+0.5)}')
  max_permgen=$( echo "$max_memory_mb * $JVM_PERMGEN_RATIO" | bc | awk '{print int($1+0.5)}')
  HAZELCAST_OPTS="$HAZELCAST_OPTS -Xmx${max_heap}m -XX:MaxPermSize=${max_permgen}m"
  export HAZELCAST_OPTS

  # Setup clustering
  if [ "$OPENSHIFT_HAZELCAST_PROXY_PORT" ]; then
    setup_hazelcast

    #HAZELCAST_OPTS="$HAZELCAST_OPTS -Dhazelcast.cluster.public.host=${OPENSHIFT_HAZELCAST_PROXY_IP} -Dhazelcast.cluster.public.port=${OPENSHIFT_HAZELCAST_PROXY_PORT}"
    HAZELCAST_OPTS="$HAZELCAST_OPTS -Dhazelcast.memcache.enabled=true"
    hazelcast_cluster="-Dhazelcast.config=$OPENSHIFT_HAZELCAST_DIR/hazelcast.xml"

  fi

  # Start up hazelcast
  pushd $OPENSHIFT_REPO_DIR > /dev/null

    hazelcast_server="com.hazelcast.examples.StartServer"
    echo "java -cp "$HAZELCAST_HOME/lib/hazelcast-$version.jar:${OPENSHIFT_HAZELCAST_DIR/conf}" $HAZELCAST_OPTS $hazelcast_cluster $hazelcast_server >> $logf 2>&1 &"
    java -server -cp "$HAZELCAST_HOME/lib/hazelcast-$version.jar:${OPENSHIFT_HAZELCAST_DIR/conf}" $HAZELCAST_OPTS $hazelcast_cluser $hazelcast_server >> $logf 2>&1 &
     
    PROCESS_ID=$!
    echo "$PROCESS_ID" > ${HAZELCAST_PID_FILE}
  popd > /dev/null
}

function restart() {
  echo "Restarting Hazelcast $version cartridge"
  stop
  start
}

function status() {
  if isrunning; then
    client_result "Application is running"
  else
    client_result "Application is either stopped or inaccessible"
  fi
}

# Clean up any log files
function tidy() {
  client_message "Emptying log dir: $OPENSHIFT_HAZELCAST_LOG_DIR"
  shopt -s dotglob
  rm -rf $OPENSHIFT_HAZELCAST_LOG_DIR/*
}

function threaddump() {
  echo "Thread dump for Hazelcast $version cartridge"

  if ! isrunning; then
    echo "Application is stopped"
    exit 1
  elif [ -f "$HAZELCAST_PID_FILE" ]; then
    javapid=$(cat $HAZELCAST_PID_FILE);
    kill -3 $javapid
    client_result "Success"
    client_result "The thread dump file will be available via:"
    client_result "rhc tail $OPENSHIFT_APP_NAME -g $OPENSHIFT_GEAR_UUID -f $logf -o '-n 250'"
  else
    echo "Failed to locate Hazelcast PID File"
  fi
}

case "$1" in
  start)        start ;;
  stop)         stop ;;
  restart)      restart ;;
  status)       status ;;
  tidy)         tidy ;;
  threaddump)   threaddump ;;
  *)            exit 0
esac
